- name: required variables are defined
  assert:
    that:
      - item is defined
    fail_msg: "{{ item }} should be defined"
    success_msg: "{{ item }} is defined"
  loop:
    - domains
    - admin_email

- name: create required docker volumes
  become: true
  command: "docker volume create {{ item }}"
  args:
    creates: "{{ docker_volumes_path }}/{{ item }}"
  loop:
    - letsencrypt-config
    - letsencrypt-var
    - letsencrypt-data
    - letsencrypt-dh

- name: stat certificates
  become: true
  stat:
    path: "{{ docker_volumes_path }}/letsencrypt-config/_data/live"
  register: certificates

- name: list started containers
  become: true
  command: docker ps -q
  register: started_docker_ctrs
  check_mode: false
  changed_when: false

- name: every other containers are stopped
  become: true
  command: "docker stop {{ started_docker_ctrs.stdout }}"
  when: started_docker_ctrs.stdout != "" and not certificates.stat.exists

- name: nginx conf exists on remote host
  become: true
  template:
    src: nginx.conf
    dest: /tmp/nginx.conf
    owner: root
    group: root
    mode: 0400
  when: not certificates.stat.exists
  changed_when: false

- name: a temporary container container is started to answer acme challenge
  become: true
  docker_container:
    name: letsencrypt-tmp-website
    image: nginx
    auto_remove: true
    volumes:
      - /tmp/nginx.conf:/etc/nginx/conf.d/default.conf
      - letsencrypt-data:/usr/share/nginx/html
    ports: 80:80
  when: not certificates.stat.exists

- set_fact:
    certbot_cmd:
      - certonly 
      - "--webroot"
      - "--email={{ admin_email }}"
      - "--agree-tos"
      - "--no-eff-email"
      - "--webroot-path=/data/letsencrypt"

- name: a letsencrypt certificate has been delivered
  become: true
  docker_container:
    name: certbot
    image: certbot/certbot
    auto_remove: true
    volumes:
      - letsencrypt-config:/etc/letsencrypt
      - letsencrypt-var:/var/lib/letsencrypt
      - letsencrypt-data:/data/letsencrypt
    command: "{{ (certbot_cmd | join(' ')) + ' -d ' + (item.split() | join(' -d ')) }}"
  loop: "{{ domains }}"
  when: not certificates.stat.exists

- name: temporary http server has been stopped
  become: true
  docker_container:
    name: letsencrypt-tmp-website
    state: absent

- name: generate openssl certificate
  become: true
  openssl_dhparam:
    path: "{{ docker_volumes_path }}/letsencrypt-dh/_data/dhparam-2048.pem"
    size: 2048

- name: setup contab for certificate renewal
  become: true
  cron:
    name: renew ssl certificates
    minute: '0'
    hour: '3'
    job: docker run --rm --name certbot -v letsencrypt-config:/etc/letsencrypt -v letsencrypt-var:/var/lib/letsencrypt -v letsencrypt-data:/data/letsencrypt certbot/certbot renew --webroot -w /data/letsencrypt --quiet
